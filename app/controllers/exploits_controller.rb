class ExploitsController < ApplicationController
  helper_method :create_link_text

  autocomplete :exploit_platform, :title, full: true
  autocomplete :exploit_type, :title, full: true

  def index
    @exploits = ExploitDbSearch.search(params[:search]) if params[:search]
    @exploit_types = ExploitType.all
  end

  def show
    exploit_from_db = Exploit.find(params[:id])
    @exploit = ExploitDbSearch.load(exploit_from_db.exploit_db_id.to_s)
    @file_extension = ExploitDbSearch.get_file_extension(exploit_from_db.exploit_db_id.to_s)
    if @exploit.nil?
      @exploit = exploit_from_db
      fe = File.extname(exploit_from_db.custom_file.path)
      @file_extension = ExploitFile.extention(exploit_from_db.custom_file)
    end
  end

  def new
    @exploit = Exploit.new
  end

  def create
    @exploit = Exploit.new(exploit_params)
    exploit_platform = ExploitPlatform.find_or_create_by(title: params["exploit"]["exploit_platform"])
    exploit_type = ExploitType.find_or_create_by(title: params["exploit"]["exploit_type"])
    @exploit.exploit_platform_id = exploit_platform.id
    @exploit.exploit_type_id = exploit_type.id
    @exploit.author = current_user.username
    @exploit.user_id = current_user.id
    @exploit.source = "exploit-custom"
    @exploit.date = Date.today.strftime("%Y-%m-%d")
    respond_to do |format|
      if @exploit.save
        format.html { redirect_to request.referer, notice: 'Custom exploit has been successfully created.' }
      else
        format.html { redirect_to request.referer, notice: @exploit.errors }
      end
    end
  end

  def edit
    find_exploit
  end

  def update
    find_exploit
    respond_to do |format|
      if @exploit.update_attributes(exploit_params)
        format.html { redirect_to custom_exploits_path, notice: 'Custom exploit was successfully updated.' }
      else
        format.html { render :edit }
      end
    end
  end

  def destroy
    find_exploit
    ExploitType.find_and_delete(@exploit.exploit_type_id)
    ExploitPlatform.find_and_delete(@exploit.exploit_platform_id)
    @exploit.destroy
    respond_to do |format|
      format.html { redirect_to custom_exploits_path, notice: 'Custom exploit was successfully destroyed.' }
    end
  end

  def create_link_text(exploit)
    "#{exploit["description"]} | #{exploit["platform"].upcase} -- #{exploit["type"].upcase}"
  end

  private

  def exploit_params
    params.require(:exploit).permit(:exploit_type_id, :port, :description, :custom_file, :platform)
  end

  def find_exploit
    @exploit = Exploit.find(params[:id])
  end
end
